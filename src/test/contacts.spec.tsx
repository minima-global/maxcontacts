import ContactsList from './../pages/ContactsList'
import { screen, fireEvent, render, waitFor } from '@testing-library/react'
import { HashRouter, MemoryRouter } from 'react-router-dom'
import { commands, events } from 'npm-upload-9781'
import ContactDetailPage from './../pages/ContactDetail/ContactDetailPage'

const mockProfile = {
    logs: false,
    name: 'neil-desk',
    publickey:
        '0x30819F300D06092A864886F70D010101050003818D0030818902818100909D39F28BE146E6C8CAFFEDB6D455742AD40555D691D6693B087AED01FD786DA6938945340C1FF5B8CA9563359A393EAA15D48D1BBDFB181A222376836E9E54E9CF8F78E26884C17F38F511C2043B24E1BBBA54F72E2B23666364B65844BF36D99968C6537508A4C45766594497E99183117247D6D22950F323E46F099B17750203010001',
    staticmls: false,
    mls: 'MxG18HGG6FJ038614Y8CW46US6G20810K0070CD00Z83282G60G1BNSV07SJ43EBV6FFNYK993KGJ1U2EQD66GSRD1S52RVBU30RKT4SEKDGK22DGN11J6D77EY0DD9T77RFE863B2QU8D1Z02S46QK08A6TR9J802A627QV1FQS765QJU7VR4RG5TYD0Z55KU4ZJU16Y5KC0S8RJ5TMHFPAUAD4E2GWVTQ44AZMPFV2WV95KBM450FBUQQUAZ1G4106080042PTQTM@5.189.130.43:9001',
    localidentity:
        'MxG18HGG6FJ038614Y8CW46US6G20810K0070CD00Z83282G60G1B7ER0YVWQER29J3M5YWQ61M5NF0JACYF3YJ8RJNN7RUAAUK48UNCFJAYN17GGC2WJ4EU6YN08Z2NPRRWWQK28Q8AZKFJRP3HSJF7SVC3H2472RCS5M6CQQGP8MM9V5CEMPKQ4ZEQZ8YJG478R9E8VYTVQ63KSA6CEGA2AFW63R12CK1YHK9S59996DSG9HNAZ8ET3VP39BFK410608004CC7J6R@172.17.0.2:9001',
    contact:
        'MxG18HGG6FJ038614Y8CW46US6G20810K0070CD00Z83282G60G1AGW33Z57T3248M2NM0AA5U7DG9YYE48NA43AR206UHEF24T7QVPT0AJFMMJE869NKQZCF3J87K1VP83G5N7KF55FK17V8GM8NK3Y2TN5VQJZDMF6Y05EBBSK4YC6WJYFDAJB3VHDVF5WQ2Z8J7U6R3YDAZZGWBJY6UVM4B7KRQ92BVZ8HANYKT918HGNEWGTF26PR4EG11ZRS10608006MTFGA7@5.189.130.43:9001',
}

const mockContacts = [
    {
        id: 196,
        publickey:
            '0x30819F300D06092A864886F70D010101050003818D0030818902818100A26C371AFB1F1B8C2DDDB7E8BCF663A41ECC9244F55852AD2704DEE41F3BFC284867549C59232C7536BA540B3EC88496C6B3554885A15DA036F628020B57A09835A9D6349466AE1A137B938FCB6C0547CD3164C309EAB579DA60C674986F7A1E9BDE8DADD98D9EB7B6D90829A1F5938CD8D0E9C66BCB1104762888EBBED0F46F0203010001',
        currentaddress:
            'MxG18HGG6FJ038614Y8CW46US6G20810K0070CD00Z83282G60G1WJ926839BA67WTD54K50A0NESG9U04WEV4NDW081T6P8URNDG5BTCEU43MKJN5G450D11ZQM3ZB4KYZ5UJ2NA6VSP81CK2EGZTDNH8HVDK75K07JMJT6U5E93A9YNGR0Y8VADYWJEK7SHSQRBQ6932QR8J4BP4R014Y8N5WJ9Y4WK47DY8WPBR7YZ764FAG4Q5CTVF6FGA6FS106080063Y530H@167.86.99.207:9121',
        myaddress:
            'MxG18HGG6FJ038614Y8CW46US6G20810K0070CD00Z83282G60G13NKP9QSKS6PFR4M5BUD4HTE9EAE46TE1H8PVUD9RD1Y9T0JWJWSFDVEV9DBE794AN0A9QNJBVWEVKKJC35ASZU52Z321G0BEGW6Q7EK6HN23Q1EZCN3WCHQEK6VFJ5Y4VC29S5Y8JA60A0BFFHBJDBJ90RN9TW2HF1MHHTV7K65B4K1W0SEC7JDGTSA7NWR9M1YH5JMFZ48V410608005R3HND0@64.227.37.67:9001',
        lastseen: 1668621955174,
        date: 'Wed Nov 16 18:05:55 GMT 2022',
        extradata: {
            name: 'Neil-phone',
            minimaaddress: 'MxG080MFYVD96N1TN4EKW6S8BRKMFADBFN9EHFE6NF28UTNEJ8MZ87ZFY6NWF5Y',
            topblock: '233642',
            checkblock: '233592',
            checkhash: '0x00000001765CE10E151C272C9165F1C6E52B682088361813DD813F4855A1DF95',
            mls: 'MxG18HGG6FJ038614Y8CW46US6G20810K0070CD00Z83282G60G16A1D1R9EGGTP9MHT8833Q3BHE6TJ6NJCEBZCGASER0JA9CTJDV2RSNJYRNSY95NMQ76VE2YBDMC1UQHEB0C4BFHHYJYK4ARMA9HQ9B8MZ9EDPB9TNEJ5JB911NGKF7FFCZQAUMNYKM80AQK7H4N202JNRP8Y9EJ23UW8CPFQCA7JV5MQFSH6V1KN4TQCV5Y24HDKAJC5MJ6UK10608006EHUGR9@167.86.99.207:9121',
        },
        chaintip: '235205',
        samechain: true,
    },
    {
        id: 261,
        publickey:
            '0x30819F300D06092A864886F70D010101050003818D0030818902818100909D39F28BE146E6C8CAFFEDB6D455742AD40555D691D6693B087AED01FD786DA6938945340C1FF5B8CA9563359A393EAA15D48D1BBDFB181A222376836E9E54E9CF8F78E26884C17F38F511C2043B24E1BBBA54F72E2B23666364B65844BF36D99968C6537508A4C45766594497E99183117247D6D22950F323E46F099B17750203010001',
        currentaddress:
            'MxG18HGG6FJ038614Y8CW46US6G20810K0070CD00Z83282G60G1HFAU99TMBY1GRHQP6CF5553S1Y4U6V63AH97Q2EY8MZZA76K62Q544W9USN0U7EJ243CJKBPP9SY472PKCBHEFZVEZF7MGEGN1BH6VCSZYDM1NDKABNCN12PD5GCZJZ9GQ00CH497EZQUWU0Z3ZGHNRGJSQF0CG52EMK17M2RN8MFU79BKFWMV5FYE64D8N63SZ63Z01ZBNC4106080042UYRKB@193.37.214.40:9001',
        myaddress:
            'MxG18HGG6FJ038614Y8CW46US6G20810K0070CD00Z83282G60G199WKUTHHZQCPC58U680GEENZ5ZYUQ6KZZ49D5N50T0W35V6M9NHN4ENTST1KTJQ0TMVETZ01J5FE93GDSKGBS0WSC5A4F9BHKKSQG2103E1JU6D43U8ND6B8JZWGMBR59FKFNATVCZ8YYJ3HNHPRMVMZWSHUS3YKZSCN4GREMU13B179BPHVBZZE2ZZKV0H1NACEK1RV3087S10608004688H32@116.203.140.13:9001',
        lastseen: 1668699884252,
        date: 'Thu Nov 17 15:44:44 GMT 2022',
        extradata: {
            name: 'neil-desk',
            minimaaddress: 'MxG080SD8F1YJM8CJF77DVSH5JY7F2Z0ZBWZKZJJ0PEDECJ3FHCDF9VT5E1CE2S',
            topblock: '235181',
            checkblock: '235131',
            checkhash: '0x00000001D15D4EEE6C545F320C233CB05B401D3170CD2FD3565CB865D009BCD4',
            mls: 'MxG18HGG6FJ038614Y8CW46US6G20810K0070CD00Z83282G60G1BNSV07SJ43EBV6FFNYK993KGJ1U2EQD66GSRD1S52RVBU30RKT4SEKDGK22DGN11J6D77EY0DD9T77RFE863B2QU8D1Z02S46QK08A6TR9J802A627QV1FQS765QJU7VR4RG5TYD0Z55KU4ZJU16Y5KC0S8RJ5TMHFPAUAD4E2GWVTQ44AZMPFV2WV95KBM450FBUQQUAZ1G4106080042PTQTM@5.189.130.43:9001',
        },
        chaintip: '235205',
        samechain: true,
    },
]

it('should render the correct number of contacts', async () => {
    render(
        <MemoryRouter>
            <ContactsList myContacts={mockContacts}></ContactsList>
        </MemoryRouter>
    )

    screen.getAllByText('same chain')

    const contactItems = screen.getAllByRole('heading', { level: 4 })

    // h4 for each of the contacts
    // + 1 for the New Contact pop up header
    expect(contactItems).toHaveLength(2 + 1)
})

it('shoud be able to add a new contact', async () => {
    const mockedMaxcontacts = jest.fn()
    jest.spyOn(commands, 'maxcontacts').mockImplementationOnce(mockedMaxcontacts)

    render(
        <MemoryRouter>
            <ContactsList myContacts={mockContacts}></ContactsList>
        </MemoryRouter>
    )

    const newContactButton = screen.getByRole('button', { name: 'contacts_icon New Contact' })
    fireEvent.click(newContactButton)
    await waitFor(() => screen.findByText('Enter your contacts Minima address'))

    // expect(screen.getByText('Choose a display name')).toBeTruthy()

    const input = screen.getByLabelText('Enter your contacts Minima address')

    const testAddress = 'MxTESTADDRESS@77.68.121.217:9001'

    fireEvent.change(input, { target: { value: testAddress } })

    const addContactButton = screen.getByText('add contact')
    fireEvent.click(addContactButton)

    expect(mockedMaxcontacts).toHaveBeenCalledWith({ action: 'add', contact: testAddress })
})

it('should be able to delete a contact', async () => {
    const mockedMaxcontacts = jest.fn()
    jest.spyOn(commands, 'maxcontacts').mockImplementationOnce(mockedMaxcontacts)

    render(
        <MemoryRouter>
            <ContactDetailPage contact={mockContacts[0]}></ContactDetailPage>
        </MemoryRouter>
    )

    const removebutton = screen.getByText('Remove contact')
    fireEvent.click(removebutton)

    expect(mockedMaxcontacts).toHaveBeenCalled()
})
